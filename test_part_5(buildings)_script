--
-- PostgreSQL database dump
--

-- Dumped from database version 13.1
-- Dumped by pg_dump version 13.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: adminpack; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS adminpack WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION adminpack; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION adminpack IS 'administrative functions for PostgreSQL';


--
-- Name: add_500_to_salary_in_loop(); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.add_500_to_salary_in_loop()
    LANGUAGE plpgsql
    AS $$
    begin
        for i in 1..(select count(*) from workers)
        loop
        update workers set salary = salary + 500 where id = i;
        end loop;
    end;
    $$;


ALTER PROCEDURE public.add_500_to_salary_in_loop() OWNER TO postgres;

--
-- Name: delete_site_and_transfer_workers_to_random_site(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.delete_site_and_transfer_workers_to_random_site(site_id_from_user bigint)
    LANGUAGE plpgsql
    AS $$
    declare r bigint = ((random() * (select count(*) from
(select * from workers where site_id = site_id_from_user)c) + 1)::bigint);
begin
        if r = site_id_from_user then
          call delete_site_and_transfer_workers_to_random_site();
          else update workers set site_id = r where site_id = site_id_from_user;
          -- the random can give me the site that i wonna delete so if that happends
          -- i wonna call that function again for a different random site
          end if;
end;
$$;


ALTER PROCEDURE public.delete_site_and_transfer_workers_to_random_site(site_id_from_user bigint) OWNER TO postgres;

--
-- Name: get_avg_of_workers_per_site(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_avg_of_workers_per_site() RETURNS double precision
    LANGUAGE plpgsql
    AS $$
begin
    return ((select count(*) from workers)::double precision
           / (select count(*) from sites)::double precision);

end;
$$;


ALTER FUNCTION public.get_avg_of_workers_per_site() OWNER TO postgres;

--
-- Name: get_avg_salary_by_role(double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_avg_salary_by_role(role_id_from_user double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $$
    begin
        return (select avg(workers.salary::double precision) from workers where role_id = role_id_from_user);
    end;
$$;


ALTER FUNCTION public.get_avg_salary_by_role(role_id_from_user double precision) OWNER TO postgres;

--
-- Name: get_workers_from_specific_site(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_workers_from_specific_site(site_id_from_user bigint) RETURNS TABLE(id bigint, name text, phone text, salary integer, role_id bigint, site_id bigint)
    LANGUAGE plpgsql
    AS $$
    BEGIN
        return query
        select * from workers where workers.site_id = site_id_from_user;
    END;
 $$;


ALTER FUNCTION public.get_workers_from_specific_site(site_id_from_user bigint) OWNER TO postgres;

--
-- Name: set_salary(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.set_salary() RETURNS bigint
    LANGUAGE plpgsql
    AS $$
begin
        for i in 1..(select count(*) from workers)
    loop
            if (select role_id from workers where id = i) = 1 then
         update workers set salary = 20000 where id = i;
         else
         update workers set salary = ((random() * 10000) + 5000) where id = i;
         end if;
    end loop;
        return 3;
end;
$$;


ALTER FUNCTION public.set_salary() OWNER TO postgres;

--
-- Name: site_with_most_workers(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.site_with_most_workers() RETURNS TABLE(id bigint, name text, adress text)
    LANGUAGE plpgsql
    AS $$
    BEGIN

        return query
select * from sites where sites.id = (select site_id from (select c.row_num, c.site_id from (select *,
row_number() over (partition by site_id) row_num
from workers
order by site_id desc) c
order by row_num desc limit 1) g);
  END;
 $$;


ALTER FUNCTION public.site_with_most_workers() OWNER TO postgres;

--
-- Name: workers_with_role(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.workers_with_role() RETURNS TABLE(id bigint, name text, phone text, salary integer, role_id bigint, site_id bigint, role_name text)
    LANGUAGE plpgsql
    AS $$
    BEGIN
        return query
        select workers.id, workers.name, workers.phone, workers.salary, workers.role_id, workers.site_id,roles.name
               from workers join roles on workers.role_id = roles.id;
    END;
$$;


ALTER FUNCTION public.workers_with_role() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: roles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.roles (
    id bigint NOT NULL,
    name text
);


ALTER TABLE public.roles OWNER TO postgres;

--
-- Name: roles_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.roles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.roles_id_seq OWNER TO postgres;

--
-- Name: roles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.roles_id_seq OWNED BY public.roles.id;


--
-- Name: sites; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sites (
    id bigint NOT NULL,
    name text NOT NULL,
    address text NOT NULL
);


ALTER TABLE public.sites OWNER TO postgres;

--
-- Name: sites_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.sites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sites_id_seq OWNER TO postgres;

--
-- Name: sites_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.sites_id_seq OWNED BY public.sites.id;


--
-- Name: workers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.workers (
    id bigint NOT NULL,
    name text NOT NULL,
    phone text NOT NULL,
    salary integer,
    role_id bigint NOT NULL,
    site_id bigint NOT NULL
);


ALTER TABLE public.workers OWNER TO postgres;

--
-- Name: workers_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.workers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.workers_id_seq OWNER TO postgres;

--
-- Name: workers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.workers_id_seq OWNED BY public.workers.id;


--
-- Name: roles id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.roles ALTER COLUMN id SET DEFAULT nextval('public.roles_id_seq'::regclass);


--
-- Name: sites id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sites ALTER COLUMN id SET DEFAULT nextval('public.sites_id_seq'::regclass);


--
-- Name: workers id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.workers ALTER COLUMN id SET DEFAULT nextval('public.workers_id_seq'::regclass);


--
-- Data for Name: roles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.roles (id, name) FROM stdin;
1	builder
2	adviser
\.


--
-- Data for Name: sites; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.sites (id, name, address) FROM stdin;
1	petah tikva	hamoshe 7
2	rosh hanikra	lehavim 15
\.


--
-- Data for Name: workers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.workers (id, name, phone, salary, role_id, site_id) FROM stdin;
1	bob	097509345	21000	1	1
2	moshe	89745324	6024	2	2
3	itsik	98349862	21000	1	1
4	nadav	987329498	21000	1	1
5	shalom	98743593	8824	2	2
\.


--
-- Name: roles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.roles_id_seq', 2, true);


--
-- Name: sites_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.sites_id_seq', 2, true);


--
-- Name: workers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.workers_id_seq', 5, true);


--
-- Name: roles roles_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.roles
    ADD CONSTRAINT roles_pk PRIMARY KEY (id);


--
-- Name: sites sites_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sites
    ADD CONSTRAINT sites_pk PRIMARY KEY (id);


--
-- Name: workers workers_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.workers
    ADD CONSTRAINT workers_pk PRIMARY KEY (id);


--
-- Name: workers workers_roles_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.workers
    ADD CONSTRAINT workers_roles_id_fk FOREIGN KEY (role_id) REFERENCES public.roles(id);


--
-- Name: workers workers_sites_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.workers
    ADD CONSTRAINT workers_sites_id_fk FOREIGN KEY (site_id) REFERENCES public.sites(id);


--
-- PostgreSQL database dump complete
--

